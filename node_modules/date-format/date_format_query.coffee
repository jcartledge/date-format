json = require "json-parse"
path = require "path"
DateFormatChar = require path.resolve(__dirname, "date_format_char")

class DateFormatQuery
  constructor: (@lang = "php") ->
    json_path = path.resolve __dirname, "data", @lang, "format_characters.json"
    @format_chars = (json.sync json_path).map (raw_char) ->
      new DateFormatChar raw_char

  matches: (str) ->
    matches = {}
    for format_char in @format_chars
      if match = format_char.match str
        _match = match.pop()
        index = str.indexOf(_match, match.index)
        (matches[index] ?= []).push
          char: format_char.char
          type: format_char.type
          start: index
          match: _match
    matches[key] for key in Object.keys matches

  suggestions: (str) ->
    (@raw_suggestions str).filter @_suggestion_filter

  suggestions_formatted: (str) ->
    @format_suggestion suggestion, str for suggestion in @suggestions str

  raw_suggestions: (str) ->
    (match for match in @matches str).reduce @_cartesian, [[]]

  format_suggestion: (suggestion, str) ->
    (str = @format_match match, str for match in suggestion.reverse()).pop()

  format_match: (match, str) ->
    (str.substring 0, match.start) + match.char +
    (str.substring match.start + match.match.length)

  _cartesian: (a, b) ->
    ret = []
    ret.push _a.concat _b for _a in a for _b in b
    ret

  _suggestion_filter: (suggestion) ->
    keys = {}
    _filter = (char) -> keys[char.type] = yes unless keys[char.type]?
    (suggestion.filter _filter).length is suggestion.length

module.exports = DateFormatQuery
